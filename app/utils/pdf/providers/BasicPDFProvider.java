package utils.pdf.providers;

import java.io.IOException;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPageEventHelper;

import utils.pdf.PDFContentProvider;
import utils.pdf.PDFContentProviderConfiguration;
import utils.pdf.exception.PDFContentProviderException;

public class BasicPDFProvider implements PDFContentProvider {

	private static final float DEFAULT_FONT_SIZE = 12;

	private Font font_normal;
	private Font font_small;
	private Font font_bold;
	private Font font_italic;

	@Override
	public PDFContentProviderConfiguration getConfiguration() {
		PDFContentProviderConfiguration configuration = new PDFContentProviderConfiguration();

		configuration.setPageSize(PageSize.A4);

		configuration.setMarginLeft(40);
		configuration.setMarginRight(40);
		configuration.setMarginTop(30);
		configuration.setMarginBottom(40);

		configuration.setMetadataAuthor("António Lopes");
		configuration.setMetadataCreator("António Lopes");
		configuration.setMetadataKeywords("Keyword 1, Keyword 2");
		configuration.setMetadataSubject("This is an example of a PDF generated by the application");
		configuration.setMetadataTitle("PDF generated by the application");

		return configuration;
	}

	@Override
	public void initializeFonts() throws PDFContentProviderException {
		try {
			BaseFont base_font = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
			this.font_normal = new Font(base_font, DEFAULT_FONT_SIZE);
			this.font_small = new Font(base_font, DEFAULT_FONT_SIZE - 2);
			this.font_bold = new Font(base_font, DEFAULT_FONT_SIZE, Font.BOLD);
			this.font_italic = new Font(base_font, DEFAULT_FONT_SIZE, Font.ITALIC);
		} catch (DocumentException e) {
			throw new PDFContentProviderException(e);
		} catch (IOException e) {
			throw new PDFContentProviderException(e);
		}
	}

	@Override
	public PdfPageEventHelper getPageEvent() {
		return new BasicProviderHeaderAndFooter("This is the Header of the document", false, this.font_small);
	}

	@Override
	public void addContent(Document document) throws PDFContentProviderException {
		try {
			addEmptyLinesToDocument(document, 1, this.font_normal);

			document.add(new Paragraph("This is the initial paragraph in a normal font.", this.font_normal));

			document.newPage();

			addEmptyLinesToDocument(document, 1, this.font_normal);

			Phrase phrase1 = new Phrase("This is another paragraph that has a ", font_normal);
			Phrase phrase2 = new Phrase("part that is bold.", font_bold);
			Paragraph paragraph = new Paragraph();
			paragraph.add(phrase1);
			paragraph.add(phrase2);
			document.add(paragraph);

			document.newPage();

			addEmptyLinesToDocument(document, 1, this.font_normal);

			document.add(new Paragraph("This is the final paragraph that is italic.", this.font_italic));

		} catch (DocumentException e) {
			throw new PDFContentProviderException(e);
		}
	}

	private void addEmptyLinesToDocument(Document document, int number, Font font) throws DocumentException {
		Paragraph p = new Paragraph();
		addEmptyLines(p, number, font);
		document.add(p);
	}

	private static void addEmptyLines(Paragraph paragraph, int number, Font font) {
		for (int i = 0; i < number; i++)
			paragraph.add(new Paragraph(" ", font));
	}
}
