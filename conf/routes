# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET 	/                           controllers.ApplicationController.index()
GET 	/styles 					controllers.ApplicationController.renderStylesPage(request: Request)

# Test pages - to be deleted later
GET 	/test 							controllers.TestController.test(request: Request)
GET 	/tests 							controllers.TestController.renderTests(request: Request)
GET 	/tests/page-for-user 			controllers.TestController.authenticatedPage()
GET 	/tests/page-for-admin 			controllers.TestController.authenticatedPageForAdmin()
GET 	/tests/hash-manager 			controllers.TestController.hashManager()
GET 	/tests/buffer-mail 				controllers.TestController.bufferMail()
GET 	/tests/ajax-endpoint 			controllers.TestController.ajaxEndpoint()
GET 	/tests/generate-pdf-document 	controllers.TestController.generatePDFDocument(request: Request)
GET 	/tests/generate-excel-document 	controllers.TestController.generateExcelDocument(request: Request)
GET 	/tests/generate-word-document 	controllers.TestController.generateWordDocument(request: Request)
GET 	/tests/get-geo-ip-data 			controllers.TestController.getGeoIPData(request: Request)
GET 	/tests/form-generator			controllers.TestController.formGeneratorExample(request: Request)

# Search
GET 	/search 						controllers.SearchController.renderSearchForm(request: Request, search_term: String ?= null)
POST 	/search 						controllers.SearchController.submitSearchForm(request: Request)

# Authentication
GET 	/auth/default-login 			controllers.AuthenticationController.renderDefaultLogin(request: Request, redirect: String ?= null)
GET 	/auth/default-logout 			controllers.AuthenticationController.renderDefaultLogout(request: Request)
GET 	/auth/oauth/office365			controllers.AuthenticationController.loginWithOffice365(request: Request, redirect: String ?= null)
+nocsrf
POST 	/auth/oauth/office365/callback 	controllers.AuthenticationController.processOffice365OAuthLoginCallback(request: Request)
GET 	/auth/login 				controllers.AuthenticationController.renderLogin(request: Request, redirect: String ?= null)
POST 	/auth/login 				controllers.AuthenticationController.submitLogin(request: Request)
GET 	/auth/logout 				controllers.AuthenticationController.logout(request: Request)

# Backoffice: User
GET 	/bo 						controllers.bo.BackofficeUserController.renderBackofficeIndex(request: Request)
GET 	/bo/user 					controllers.bo.BackofficeUserController.renderBackofficeUserIndex(request: Request)
GET 	/bo/user/profile 			controllers.bo.BackofficeUserController.renderProfilePage(request: Request)
GET 	/bo/user/role-change 		controllers.bo.BackofficeUserController.renderRoleChange(request: Request)
POST 	/bo/user/role-change 		controllers.bo.BackofficeUserController.submitRoleChange(request: Request)

# Backoffice: System
GET 	/bo/system 							controllers.bo.BackofficeSystemController.renderSystemIndex(request: Request)
GET 	/bo/system/config 					controllers.bo.BackofficeSystemController.renderSystemConfig(request: Request)
GET 	/bo/system/config/edit 				controllers.bo.BackofficeSystemController.renderSystemConfigEdit(request: Request)
POST 	/bo/system/config/edit 				controllers.bo.BackofficeSystemController.submitSystemConfigEdit(request: Request)
GET 	/bo/system/properties/add 			controllers.bo.BackofficeSystemController.renderAddSystemConfigPropertyForm(request: Request)
POST 	/bo/system/properties/add 			controllers.bo.BackofficeSystemController.submitAddSystemConfigPropertyForm(request: Request)
GET 	/bo/system/properties/$prop_id<[0-9]+>/edit 		controllers.bo.BackofficeSystemController.renderEditSystemConfigPropertyForm(request: Request, prop_id: Integer)
POST 	/bo/system/properties/$prop_id<[0-9]+>/edit 		controllers.bo.BackofficeSystemController.submitEditSystemConfigPropertyForm(request: Request, prop_id: Integer)
GET 	/bo/system/properties/$prop_id<[0-9]+>/delete 		controllers.bo.BackofficeSystemController.renderDeleteSystemConfigPropertyConfirmation(request: Request, prop_id: Integer)
POST 	/bo/system/properties/$prop_id<[0-9]+>/delete 		controllers.bo.BackofficeSystemController.submitDeleteSystemConfigPropertyConfirmation(request: Request, prop_id: Integer)
GET 	/bo/system/jobs 					controllers.bo.BackofficeSystemController.renderSystemJobs(request: Request)
GET 	/bo/system/logs 					controllers.bo.BackofficeSystemController.renderSystemLogs(request: Request)
GET 	/bo/system/menus 					controllers.bo.BackofficeSystemController.renderMenuManagement(request: Request)
GET 	/bo/system/users 					controllers.bo.BackofficeSystemController.renderUserManagement(request: Request)
POST 	/bo/system/users 					controllers.bo.BackofficeSystemController.submitUserManagement(request: Request)
GET 	/bo/system/users/all-logs 			controllers.bo.BackofficeSystemController.renderAllUserLogs(request: Request)
GET 	/bo/system/users/impersonate-reset 		controllers.bo.BackofficeSystemController.resetImpersonateUser(request: Request)
GET 	/bo/system/users/$user_id<[\-0-9]+> 			controllers.bo.BackofficeSystemController.renderUser(request: Request, user_id: Long)
GET 	/bo/system/users/$user_id<[\-0-9]+>/edit 		controllers.bo.BackofficeSystemController.renderEditUserForm(request: Request, user_id: Long)
POST 	/bo/system/users/$user_id<[\-0-9]+>/edit 		controllers.bo.BackofficeSystemController.submitEditUserForm(request: Request, user_id: Long)
GET 	/bo/system/users/$user_id<[\-0-9]+>/impersonate 		controllers.bo.BackofficeSystemController.renderImpersonateUserConfirmation(request: Request, user_id: Long)
POST 	/bo/system/users/$user_id<[\-0-9]+>/impersonate 		controllers.bo.BackofficeSystemController.submitImpersonateUserConfirmation(request: Request, user_id: Long)
GET 	/bo/system/users/$user_id<[\-0-9]+>/log 		controllers.bo.BackofficeSystemController.renderUserLog(request: Request, user_id: Long)

# Backoffice: Reports
GET 	/bo/reports 																				controllers.bo.BackofficeReportsController.renderReportsIndex(request: Request)
GET 	/bo/reports/create-request 																	controllers.bo.BackofficeReportsController.renderAddReportRequestForm(request: Request)
GET 	/bo/reports/create-request/$type_id<[0-9]+>/add 											controllers.bo.BackofficeReportsController.renderAddReportRequestByTypeForm(request: Request, type_id: Integer)
POST 	/bo/reports/create-request/$type_id<[0-9]+>/add 											controllers.bo.BackofficeReportsController.submitAddReportRequestByTypeForm(request: Request, type_id: Integer)
GET 	/bo/reports/requests 																		controllers.bo.BackofficeReportsController.renderReportRequests(request: Request)
GET 	/bo/reports/requests/$report_id<[0-9]+> 													controllers.bo.BackofficeReportsController.renderReportRequest(request: Request, report_id: Long)
GET 	/bo/reports/requests/$report_id<[0-9]+>/execution/$execution_id<[0-9]+>/log 				controllers.bo.BackofficeReportsController.renderReportExecutionLog(request: Request, report_id: Long, execution_id: Long)
GET 	/bo/reports/requests/$report_id<[0-9]+>/execution/$execution_id<[0-9]+>/access-logs 		controllers.bo.BackofficeReportsController.renderReportExecutionAccessLogs(request: Request, report_id: Long, execution_id: Long)
POST 	/bo/reports/requests/$report_id<[0-9]+>/toggle 												controllers.bo.BackofficeReportsController.toggleReportRequestState(request: Request, report_id: Long)
GET 	/bo/reports/management 																		controllers.bo.BackofficeReportsController.renderReportManagementIndex(request: Request)
GET 	/bo/reports/management/requests 															controllers.bo.BackofficeReportsController.renderAllReportRequests(request: Request)
GET 	/bo/reports/management/report-types 														controllers.bo.BackofficeReportsController.renderReportTypes(request: Request)
GET 	/bo/reports/management/report-types/add 													controllers.bo.BackofficeReportsController.renderAddReportTypeForm(request: Request)
POST 	/bo/reports/management/report-types/add 													controllers.bo.BackofficeReportsController.submitAddReportTypeForm(request: Request)
GET 	/bo/reports/management/report-types/$type_id<[0-9]+>/edit 									controllers.bo.BackofficeReportsController.renderEditReportTypeForm(request: Request, type_id: Integer)
POST 	/bo/reports/management/report-types/$type_id<[0-9]+>/edit 									controllers.bo.BackofficeReportsController.submitEditReportTypeForm(request: Request, type_id: Integer)

# AJAX: System
GET 	/ajax/system/jobs 						controllers.ajax.AJAXSystemController.renderSystemJobs(request: Request)
GET 	/ajax/system/jobs/$job_id<[0-9]+>/log 			controllers.ajax.AJAXSystemController.renderSystemJobLog(request: Request, job_id: Integer)
POST 	/ajax/system/jobs/$job_id<[0-9]+>/activate 		controllers.ajax.AJAXSystemController.activateSystemJob(request: Request, job_id: Integer)
POST 	/ajax/system/jobs/$job_id<[0-9]+>/deactivate 	controllers.ajax.AJAXSystemController.deactivateSystemJob(request: Request, job_id: Integer)
POST 	/ajax/system/jobs/$job_id<[0-9]+>/edit 			controllers.ajax.AJAXSystemController.editSystemJob(request: Request, job_id: Integer)
+nocsrf
GET 	/ajax/system/logs 								controllers.ajax.AJAXSystemController.getSystemLogs(request: Request, nr_pages: Integer)
GET 	/ajax/system/menus 						controllers.ajax.AJAXSystemController.getMenuData(request: Request)
POST 	/ajax/system/menus/add 					controllers.ajax.AJAXSystemController.addMenuData(request: Request)
POST 	/ajax/system/menus/$menu_id<[0-9]+>/edit 		controllers.ajax.AJAXSystemController.saveMenuData(request: Request, menu_id: Integer)
POST 	/ajax/system/menus/$menu_id<[0-9]+>/delete 		controllers.ajax.AJAXSystemController.deleteMenuData(request: Request, menu_id: Integer)
GET 	/ajax/system/users/all-logs 			controllers.ajax.AJAXSystemController.getAllUserLogs(request: Request, nr_pages: Integer)
GET 	/ajax/system/users/$user_id<[\-0-9]+>/log 		controllers.ajax.AJAXSystemController.getUserLogs(request: Request, user_id: Long, nr_pages: Integer)

# AJAX: Test
GET 	/ajax/test/form-data/$form_id<[0-9]+> 			controllers.ajax.AJAXTestController.getFormData(request: Request, form_id: Long)

# Change the language (the override_redirect parameter is to override the natural redirection that is made through the referrer - NOTE: must be a relative URL)
GET 	/localize/:lang 			controllers.LanguageController.setLanguage(request: Request, lang: String, override_redirect: String)

# Default user photo
GET 	/assets/files/default-user-photo 		controllers.FileController.renderDefaultUserPhoto(request: Request)

# Access resource files
GET 	/assets/files/resources/$file_id<[\-0-9]+> 	controllers.FileController.renderResourceAssociatedFile(request: Request, file_id: Long)

# Generate messages to be used in javascript files
GET     /assets/javascripts/messages 	controllers.ApplicationController.javascriptMessages(request: Request)
# Generate routes to be used in javascript files
GET     /assets/javascripts/routes  	controllers.ApplicationController.javascriptRoutes(request: Request)

# Static resources
GET		/humans.txt					controllers.Assets.at(path="/public", file="humans.txt")
GET     /robots.txt  				controllers.Assets.at(path="/public", file="robots.txt")
GET 	/favicon.ico 				controllers.ApplicationController.renderFavicon()

# Map static resources from the /public folder to the /assets URL path
GET 	/assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

# Math pages - to learn something about play
GET 	/math/test 					controllers.MathController.testMath()
GET 	/math 						controllers.MathController.renderCalculator(request: Request ,redirect: String ?= null)
+nocsrf
POST 	/ajax/math                  controllers.MathController.ajaxSubmitCompareNumber(request: Request, numberOne: String, numberTwo: String)
+nocsrf
POST 	/ajax/math/getSumData       controllers.MathController.ajaxGetSumData(request: Request)